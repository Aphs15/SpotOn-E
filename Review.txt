# SpotOn Web Application: Full Documentation

This document provides a comprehensive overview of the SpotOn (formerly Event Hopper) web application, detailing its development from the initial stage to its current state. It covers all major features, architectural decisions, file modifications, and dependencies.

---

## 1. Project Overview

### 1.1 Application Name
SpotOn (Originally named Event Hopper)

### 1.2 Core Purpose
SpotOn is a modern web application designed for event discovery, booking, and community engagement. It allows users to browse upcoming events, view details, book tickets, and connect with other attendees.

### 1.3 Technology Stack
- **Framework**: Next.js (with App Router)
- **Language**: TypeScript
- **UI Library**: React
- **Styling**: Tailwind CSS
- **Component Library**: ShadCN UI
- **Backend Services**: Firebase (Authentication, Firestore)
- **Maps**: Google Maps Platform
- **AI/Generative AI**: Genkit

---

## 2. Initial Project Structure
The application began as a standard Next.js starter project within Firebase Studio. The initial file structure included:
- A basic home page (`src/app/page.tsx`).
- A root layout (`src/app/layout.tsx`) to define the overall page structure.
- A global stylesheet (`src/app/globals.css`) for base styling.
- Standard Next.js and ShadCN configuration files (`next.config.ts`, `tailwind.config.ts`, `components.json`).
- A basic set of ShadCN UI components pre-installed in `src/components/ui/`.

---

## 3. Chronological Feature Development & Refinements

### 3.1 Feature: User Authentication and Database
**Goal**: To implement a secure system for users to sign up, log in, and have their data persist.

**What was done**:
1.  **Firebase Project Setup**: A Firebase project was created to provide backend services.
2.  **Firebase SDK Initialization**: A configuration file was created to initialize the Firebase SDK with the project's credentials. This was later refactored to use environment variables for better security.
    - **File Added**: `src/lib/firebase.ts`
    - **File Added**: `.env.local` (to store credentials securely).
3.  **Authentication Logic**: A custom React hook and context (`useAuth`) were created to manage the user's authentication state globally. This hook handles Google Sign-In, sign-out, and listens for authentication state changes.
    - **File Added**: `src/hooks/use-auth.tsx`
4.  **Firestore Database Integration**: The `useAuth` hook was integrated with Firestore. When a new user signs in for the first time, a corresponding user document is automatically created in a `users` collection in Firestore.
    - **Location of Change**: `src/hooks/use-auth.tsx`
5.  **UI Integration**:
    - The root layout was wrapped with the `AuthProvider` to make the user state available throughout the app. (`src/app/layout.tsx`)
    - The `Header` component was updated to dynamically display either "Login/Sign Up" buttons or the user's avatar with a dropdown menu based on their login status. (`src/components/header.tsx`)
    - The login and sign-up pages were updated to use the `signInWithGoogle` function from the `useAuth` hook. (`src/app/login/page.tsx`, `src/app/signup/page.tsx`)

**Dependencies Added**:
- `firebase`: The core Firebase SDK.

### 3.2 Feature: Past Events Page
**Goal**: To declutter the home page by moving events that have already occurred to a separate, dedicated page.

**What was done**:
1.  **Home Page Filtering**: The logic on the home page (`src/app/page.tsx`) was updated to filter the events array, ensuring only events with a date in the future are displayed.
2.  **Past Events Page Creation**: A new page was created to display past events. This page fetches all events, filters them to show only those with dates in the past, and sorts them in reverse chronological order.
    - **File Added**: `src/app/events/past/page.tsx`
3.  **Navigation Update**: A link to the new "Past Events" page was added to the main navigation bar.
    - **Location of Change**: `src/components/header.tsx`

### 3.3 Data Update: Mock Event Dates
**Goal**: To ensure the application always displays a populated list of "upcoming" events for demonstration purposes.

**What was done**:
- The dates for all mock events in the data source file were updated to be in the future relative to the current date. This prevents the home page from appearing empty.
- **Location of Change**: `src/lib/events.ts`

### 3.4 Bug Fix: Google Maps API Key Error
**Goal**: To resolve the `InvalidKeyMapError` reported by the Google Maps API and provide better error handling.

**What was done**:
- The `EventMap` component was refactored to provide more specific user feedback. It now displays distinct messages for two scenarios:
    1. The Google Maps API key is missing from the environment variables.
    2. The API key is present but invalid (e.g., wrong key, APIs not enabled, or billing not set up).
- This change improves the developer experience by clarifying the root cause of the map loading failure.
- **Location of Change**: `src/components/event-map.tsx`

### 3.5 Performance: Community Page Optimization
**Goal**: To improve the initial load time of the community pages, which felt slow due to large amounts of hardcoded data.

**What was done**:
1.  **Data Extraction**: All hardcoded arrays for feed posts, community members, and discussions were moved out of the component files.
2.  **Centralized Data File**: A new file was created to house this data, making the component files smaller and more focused on presentation logic. This is a first step toward fetching data from a live backend.
    - **File Added**: `src/lib/community-data.ts`
3.  **Component Refactoring**: The community pages were updated to import their data from the new `community-data.ts` file.
    - **Files Modified**: `src/app/community/page.tsx`, `src/app/community/[slug]/page.tsx`

### 3.6 Bug Fix: Next.js Dynamic Route Params
**Goal**: To fix a server startup error related to how Next.js handles dynamic route parameters in async Server Components.

**What was done**:
- The error log indicated that `params.id` was being accessed before the `params` object (which is now a promise) was resolved.
- The dynamic event page was updated to correctly extract the `id` from the `params` object.
- **Location of Change**: `src/app/events/[id]/page.tsx` (The `id` is now destructured directly from `params` in the function signature).

### 3.7 Content Update: Event & Profile Images
**Goal**: To replace placeholder images with real, relevant images for events and community members to make the app more visually appealing and authentic.

**What was done**:
1.  **Data File Updates**: The image URLs in `src/lib/events.ts` and `src/lib/community-data.ts` were updated with the provided links.
2.  **Next.js Configuration**: The `next.config.ts` file was updated to include all new hostnames in the `images.remotePatterns` array. This is a security requirement by Next.js to allow image optimization for external domains.
    - **Location of Change**: `next.config.ts`

### 3.8 Bug Fix: Duplicate `next.config.ts`
**Goal**: To resolve a persistent image loading error caused by a conflicting Next.js configuration file.

**What was done**:
- It was identified that two `next.config.ts` files existed. The correct settings were in `src/tailwind.config.ts` (a misnamed file), while the root `next.config.ts` was being used by Next.js but lacked the required image domains.
- The configurations were merged into the single, correct `next.config.ts` at the project root.
- The duplicate and misnamed configuration file was deleted.
- **File Modified**: `next.config.ts`
- **File Deleted**: `src/tailwind.config.ts` (which was incorrectly acting as a next.config file).

### 3.9 Rebranding: Event Hopper to SpotOn
**Goal**: To update the application's branding from "Event Hopper" to "SpotOn".

**What was done**:
- A global find-and-replace was performed across the entire codebase. All user-facing instances of "Event Hopper" were changed to "SpotOn".
- **Files Modified**: `src/app/layout.tsx`, `src/components/header.tsx`

---

## 4. Final Application State

The application is now a feature-rich demo with a polished user interface, secure authentication, and a clear content structure. It is well-prepared for being published and showcased.
